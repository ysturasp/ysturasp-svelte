import { json } from '@sveltejs/kit';
import type { RequestEvent } from '@sveltejs/kit';
import { env } from '$env/dynamic/private';

const instituteContexts: Record<string, string> = {
	'Институт цифровых систем': `
Специализация: программная инженерия, информационные технологии, кибербезопасность, искусственный интеллект, разработка ПО, компьютерные системы.
Актуальные направления: ML/AI, веб-разработка, мобильные приложения, IoT, blockchain, DevOps, облачные технологии, компьютерное зрение, обработка данных.
`,
	'Институт архитектуры и дизайна': `
Специализация: архитектурное проектирование, градостроительство, дизайн интерьеров, ландшафтная архитектура, промышленный дизайн.
Актуальные направления: устойчивая архитектура, BIM-технологии, параметрическое проектирование, реновация, умные здания, городское планирование.
`,
	'Институт инженеров строительства и транспорта': `
Специализация: строительство, транспортная инфраструктура, дорожное строительство, мостостроение, геотехника.
Актуальные направления: композитные материалы, BIM в строительстве, умные транспортные системы, энергоэффективность, геоинформационные системы.
`,
	'Институт химии и химической технологии': `
Специализация: химическая технология, материаловедение, нефтехимия, биотехнология, катализ, полимерные материалы.
Актуальные направления: зелёная химия, нанотехнологии, биоматериалы, катализаторы нового поколения, переработка отходов, экологическая химия.
`,
	'Институт экономики и менеджмента': `
Специализация: экономика, менеджмент, маркетинг, финансы, управление персоналом, предпринимательство.
Актуальные направления: цифровая экономика, финтех, e-commerce, управление проектами, бизнес-аналитика, ESG, цифровая трансформация бизнеса.
`,
	'Институт инженерии и машиностроения': `
Специализация: машиностроение, мехатроника, робототехника, автоматизация производства, технологическое оборудование.
Актуальные направления: аддитивные технологии, промышленная робототехника, ЧПУ, умное производство, Industry 4.0, CAD/CAM системы.
`,
	'Заочная форма обучения': `
Специализация: различные направления подготовки для работающих специалистов.
Актуальные направления: прикладные исследования, автоматизация процессов, оптимизация производства, управление проектами.
`,
	'Заочный форма обучения (отделение УОП)': `
Специализация: управление и организация производства, логистика, производственный менеджмент.
Актуальные направления: оптимизация производственных процессов, управление цепями поставок, цифровизация производства, lean-технологии.
`,
	'Колледж': `
Специализация: среднее профессиональное образование по различным техническим специальностям.
Актуальные направления: практические проекты, автоматизация процессов, разработка прикладных решений, техническое обслуживание.
`
};

async function generateWithGroq(institute: string, count: number): Promise<string[]> {
	const context = instituteContexts[institute] || instituteContexts['Заочная форма обучения'];

	const examples: Record<string, string[]> = {
		'Институт цифровых систем': [
			'Разработка веб-приложения для управления складским учетом',
			'Проектирование системы мониторинга серверов на базе Docker',
			'Создание мобильного приложения для учета личных финансов'
		],
		'Институт химии и химической технологии': [
			'Синтез и исследование свойств полимерных композитов на основе эпоксидных смол',
			'Разработка технологии очистки сточных вод от ионов тяжелых металлов',
			'Исследование каталитических свойств оксидов металлов в процессах окисления'
		],
		'Институт инженерии и машиностроения': [
			'Проектирование автоматизированной линии сборки деталей',
			'Разработка конструкции приспособления для механической обработки',
			'Модернизация системы охлаждения токарного станка'
		],
		'Институт экономики и менеджмента': [
			'Разработка стратегии развития малого предприятия в условиях цифровой экономики',
			'Анализ эффективности маркетинговых кампаний на примере торговой компании',
			'Совершенствование системы мотивации персонала производственного предприятия'
		],
		'Институт архитектуры и дизайна': [
			'Проект реконструкции общественного пространства городской набережной',
			'Разработка дизайн-проекта интерьера кафе в современном стиле',
			'Архитектурное решение многоквартирного жилого дома'
		],
		'Институт инженеров строительства и транспорта': [
			'Проектирование конструкций многоэтажного жилого здания',
			'Разработка технологии укладки асфальтобетонного покрытия автодорог',
			'Проект организации строительства торгового центра'
		]
	};

	const instituteExamples =
		examples[institute]?.join('\n') || examples['Институт цифровых систем'].join('\n');

	const prompt = `Ты генератор тем ВКР. Выведи ТОЛЬКО ${count} тем без вступлений.

Институт: ${institute}
${context}

${institute === 'Институт химии и химической технологии' ? 'ЗАПРЕЩЕНО: программирование, AI, машинное обучение, информационные системы.\nТОЛЬКО: химические процессы, синтез, анализ веществ, материалы, катализ, технологии.' : ''}

Примеры:
${instituteExamples}

Выведи ${count} тем в таком же стиле. БЕЗ номеров, вступлений, пояснений. Каждая тема с новой строки:`;

	try {
		const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'Authorization': `Bearer ${env.GROQ_API_KEY || ''}`
			},
			body: JSON.stringify({
				model: 'llama-3.1-8b-instant',
				messages: [
					{
						role: 'user',
						content: prompt
					}
				],
				temperature: 0.8,
				max_tokens: 1024
			})
		});

		if (!response.ok) {
			throw new Error('Groq API error');
		}

		const data = await response.json();
		const text = data.choices[0].message.content;

		const topics = text
			.split('\n')
			.map((line: string) => line.trim())
			.filter((line: string) => {
				if (!line) return false;
				if (
					line.match(
						/^(Примеры|Правила|ВКР|#|\*|Темы:|Вот|Здесь|Представлены|Пять|Институт|Специализация|Актуальные)/i
					)
				)
					return false;
				if (line.length < 30 || line.length > 250) return false;
				return true;
			})
			.map((line: string) => {
				let cleaned = line.replace(/^(Тема\s*\d+[:.\s]*|[-•\d.)\s]+)/i, '').trim();
				cleaned = cleaned.replace(/^["«]|[»"]$/g, '');
				return cleaned;
			})
			.filter((line: string) => {
				return line.length > 30 && /^[А-ЯЁ]/.test(line) && /[а-яёА-ЯЁ]/.test(line);
			});

		return topics.slice(0, count);
	} catch (error) {
		console.error('Gemini API error:', error);
		throw error;
	}
}

function generateFallbackTopics(institute: string, count: number): string[] {
	const templates = [
		'Разработка {system} {tech} для {purpose} в {domain}',
		'Проектирование {object} с использованием {tech} для {purpose}',
		'Исследование {process} с применением {tech} в области {domain}',
		'Создание {system} на основе {tech} для {purpose} {domain}',
		'Оптимизация {process} с использованием {tech} в {domain}',
		'Анализ и совершенствование {system} с применением {tech} для {domain}',
		'Разработка методики {process} на основе {tech} для {purpose}',
		'Автоматизация {process} с использованием {tech} в {domain}'
	];

	const systems = [
		'интеллектуальной системы',
		'веб-платформы',
		'мобильного приложения',
		'программного комплекса',
		'цифрового сервиса',
		'информационной системы'
	];
	const techs = [
		'машинного обучения',
		'нейронных сетей',
		'компьютерного зрения',
		'blockchain',
		'микросервисной архитектуры',
		'облачных технологий',
		'IoT-устройств',
		'Big Data'
	];
	const purposes = [
		'мониторинга',
		'управления',
		'анализа',
		'прогнозирования',
		'оптимизации',
		'автоматизации',
		'визуализации',
		'контроля'
	];
	const domains = [
		'промышленного производства',
		'образовательных учреждений',
		'медицинских организаций',
		'логистических компаний',
		'торговых предприятий',
		'энергетического сектора',
		'транспортной отрасли',
		'финансовой сферы'
	];
	const objects = [
		'архитектурного объекта',
		'градостроительного решения',
		'общественного пространства',
		'жилого комплекса',
		'производственного здания',
		'транспортного узла'
	];
	const processes = [
		'бизнес-процессов',
		'производственных операций',
		'технологического цикла',
		'логистических маршрутов',
		'энергопотребления',
		'качества продукции'
	];

	const topics: string[] = [];
	const random = () => Math.random();

	for (let i = 0; i < count; i++) {
		const template = templates[Math.floor(random() * templates.length)];
		let topic = template
			.replace('{system}', systems[Math.floor(random() * systems.length)])
			.replace('{tech}', techs[Math.floor(random() * techs.length)])
			.replace('{purpose}', purposes[Math.floor(random() * purposes.length)])
			.replace('{domain}', domains[Math.floor(random() * domains.length)])
			.replace('{object}', objects[Math.floor(random() * objects.length)])
			.replace('{process}', processes[Math.floor(random() * processes.length)]);

		topics.push(topic);
	}

	return topics;
}

export async function POST({ request }: RequestEvent) {
	try {
		const { institute } = await request.json();

		if (!institute) {
			return json({ error: 'Институт не указан' }, { status: 400 });
		}

		let topics: string[] = [];

		try {
			topics = await generateWithGroq(institute, 5);

			if (topics.length < 5) {
				throw new Error('Not enough topics generated');
			}
		} catch (error) {
			console.log('Falling back to template generation');
			topics = generateFallbackTopics(institute, 5);
		}

		return json({ topics: topics.slice(0, 5) });
	} catch (error) {
		console.error('Ошибка генерации тем:', error);
		return json({ error: 'Ошибка сервера' }, { status: 500 });
	}
}
